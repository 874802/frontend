---
import ProgressBar from "../components/ProgressBar.astro";
---

<nav class="navbar">
  <!-- Secci√≥n izquierda: Usuario -->
  <div class="user-section">
    <div class="user-icon-container">
      <a id="profile-link">
        <img src="/images/icono_usuario.png" alt="User Icon" class="user-icon" />
      </a>
      <span id="username" class="username">Guest</span>
    </div>

    <!-- Contenedor donde aparecer√° bot√≥n o barra de progreso -->
    <div id="usuario-contenido"></div>

  </div>

  <!-- Logo central --> 
  <div class="logo-container">
    <!-- <img src="/images/logo_galaxy.png" alt="Galaxy IO Logo" class="logo-img" /> -->
  </div>

 <!-- Secci√≥n derecha: Iconos de navegaci√≥n -->
 <div class="menu" id="menu-links">
  <a id="store-link">
    <img src="/images/icono_carrito.png" alt="Carrito" class="menu-icon" />
  </a>
  <a id="achievements-link">
    <img src="/images/icono_medalla.png" alt="Medalla" class="menu-icon" />
  </a>
  <a id="friends-link">
    <img src="/images/icono_amigos.png" alt="Usuarios" class="menu-icon" />
  </a>
  <a id="configuration-link">
    <img src="/images/configuration.png" alt="Configuration" class="menu-icon" />
  </a>
</div>
  
</nav>


<script>
  import { validate as isUuid, v4 as uuidv4 } from "uuid"; // Importamos funciones necesarias

  document.addEventListener("DOMContentLoaded", async () => {
    function decodeJWT(token : string) {
        try {
          if (!token) return null;
          const base64Url = token.split('.')[1];
          const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
          const payload = JSON.parse(atob(base64));
          return payload;
        } catch (error) {
          console.error("Error decodificando el JWT:", error);
          return null;
        }
      };

      let accessToken = "";
      // Funci√≥n para obtener el ID del usuario desde el accessToken en las cookies
      function getUserIdFromAccessToken() {
        const cookies = document.cookie.split("; ");
        for (let cookie of cookies) {
          const [key, value] = cookie.split("=");
          if (key === "accessToken") {
            accessToken = value;
            const payload = decodeJWT(value);
            return payload?.id || null;
          }
        }
        return null;
      };

    const userId = getUserIdFromAccessToken();
    const isAuthenticated = !!userId;
    const usernameElement = document.getElementById("username");
    const contenido = document.getElementById("usuario-contenido");

    if (isAuthenticated && userId && usernameElement) {
      if (!isUuid(userId)) {
        console.warn("El ID proporcionado no es un UUID v√°lido. Se generar√° uno nuevo.");
        console.error("Error con el uuid");
        return;
      }

      const url = `http://localhost:3000/main-screen/get-user/${userId}`;
      console.log(`üì° Realizando petici√≥n a: ${url}`);

      try {
        const response = await fetch(url, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            "Auth": accessToken, // Incluye el token en el encabezado
          },
        });
        console.log(`üì• Respuesta recibida. C√≥digo de estado: ${response.status}`);

        if (!response.ok) throw new Error(`HTTP Error: ${response.status}`);

        const data = await response.json();
        console.log("‚úÖ Datos obtenidos del servidor:", data.username);

        usernameElement.textContent = data.username || "Guest";
        document.cookie = `username=${data.username}; path=/; SameSite=Lax;`
        console.log(`üìù Nombre de usuario actualizado en la interfaz: ${usernameElement.textContent}`);
      } catch (error) {
        console.error("‚ùå Error obteniendo el nombre del usuario:", error);
      }
    }

    if (userId && contenido != null) {
      contenido.innerHTML = `<div><!-- Barra de progreso --></div>`;
    } else if (contenido != null){
      contenido.innerHTML = `
      <a href="/login" 
         style="
          background: linear-gradient(to right, #a855f7, #9333ea, #7e22ce);
          color: white;
          border: none;
          padding: 8px 14px;
          cursor: pointer;
          border-radius: 8px;
          font-size: 14px;
          box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
          transition: all 0.3s ease;
          margin-top: -10px;
          text-decoration: none;">
         Reg√≠strate
      </a>
    `;
  }

  // Modificar enlaces seg√∫n autenticaci√≥n
  const profileLink = document.getElementById('profile-link');
  const storeLink = document.getElementById('store-link');
  const achievementsLink = document.getElementById('achievements-link');
  const friendsLink = document.getElementById('friends-link');
  const configLink = document.getElementById('configuration-link');

  if (profileLink instanceof HTMLAnchorElement) profileLink.href = isAuthenticated ? "/profile" : "/login";
  if (storeLink instanceof HTMLAnchorElement) storeLink.href = isAuthenticated ? "/store" : "/login";
  if (achievementsLink instanceof HTMLAnchorElement) achievementsLink.href = isAuthenticated ? "/achievements" : "/login";
  if (friendsLink instanceof HTMLAnchorElement) friendsLink.href = isAuthenticated ? "/friends" : "/login";
  if (configLink instanceof HTMLAnchorElement) configLink.href = isAuthenticated ? "/configuration" : "/configuration";
  });
</script>

<style>
/* Dise√±o principal de la navbar con Grid */
.navbar {
  display: grid;
  grid-template-columns: 1fr auto 1fr; /* Tres columnas: izquierda, centro y derecha */
  align-items: center;
  padding: 10px 15px;
  background: #282032; /* Azul oscuro */
  color: white;
  box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.2);
}

/* Alinear la secci√≥n de usuario a la izquierda */
.user-section {
  display: flex;
  align-items: center;
  gap: 15px;
  justify-content: flex-start;
  margin-top: 5px;
}

/* Contenedor del icono y nombre del usuario */
.user-icon-container {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.user-icon {
  width: 30px;
  height: 30px;
}

.username {
  font-weight: bold;
  font-size: 14px;
  margin-top: 5px;
}

/* Bot√≥n de registro con dise√±o de Tailwind */
.register-btn {
  background: linear-gradient(to right, #a855f7, #9333ea, #7e22ce);
  color: white;
  border: none;
  padding: 8px 14px;
  cursor: pointer;
  border-radius: 8px;
  font-size: 14px;
  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
  transition: all 0.3s ease;
  margin-top: -10px;
}

.register-btn:hover {
  background: linear-gradient(to left, #a855f7, #9333ea, #7e22ce);
}

/* Centrar el logo */
.logo-container {
  display: flex;
  justify-content: center;
  margin-top: 2px;
}

.logo-img {
  width: 70px;
  height: auto;
}

/* Men√∫ de iconos a la derecha */
.menu {
  display: flex;
  align-items: center;
  gap: 20px;
  justify-content: flex-end;
}

.menu-icon {
  width: 30px;
  height: 30px;
  cursor: pointer;
  transition: opacity 0.3s ease;
  margin-top: -15px;
}

.menu-icon:hover {
  opacity: 0.8;
}
</style>





