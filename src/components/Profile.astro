---
// Importar cualquier componente necesario
import Logo from "../components/Logo.astro";
import Layout from "../layouts/Layout.astro";
import Navbar from "../components/Navbar.astro";
---

<head>
  <meta charset="UTF-8">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Luckiest+Guy&display=swap">
</head>

<Layout />

<!-- NAVBAR OCUPANDO TODO EL ANCHO -->
<div class="navbar-container">
  <Navbar />
</div>

<!-- LOGO SUPERPUESTO AL NAVBAR -->
<div class="logo-container">
  <Logo />
</div>

<!-- CONTENEDOR PRINCIPAL -->
<div class="container">
  <header class="header">
    <h2 class="title">PERFIL</h2>
  </header>

  <!-- FORMULARIO DE EDICIÓN -->
  <div class="form-container">
    <form class="profile-form" id="profileForm">
      <div class="form-group">
        <label for="username">Nombre de Usuario</label>
        <input type="text" id="profile-username" name="username" />
      </div>

      <div class="form-group">
        <label for="password">Contraseña</label>
        <input type="password" id="password" name="password" placeholder="Nueva Contraseña" />
      </div>

      <div class="form-group">
        <label for="passwordB">Confirme Contraseña</label>
        <input type="password" id="passwordB" name="passwordB" placeholder="Confirme nueva contraseña" />
      </div>

      <button type="submit" class="save-button">Guardar Cambios</button>
    </form>

    <!-- Cerrar sesión -->
    <button id="logoutButton" class="logout-button">Cerrar sesión</button>

    <div id="notification" class="notification"></div>

  </div>
</div>

<script is:inline>
  // Función para mostrar notificación
  function showNotification(message, type) {
    const notification = document.getElementById("notification");

    if (notification) {
      console.log("Se debería mostrar la notificacion");
      notification.textContent = message;
      notification.className = `notification ${type}`; // 'success' o 'error'
      notification.style.display = 'block';  // Asegura que la notificación se muestra

      // Después de 5 segundos, empezamos a ocultar la notificación de forma gradual
      setTimeout(() => {
        notification.style.opacity = "0";  // Comienza el desvanecimiento
      }, 5000);

      // Después de la animación de desvanecimiento (1 segundo), ocultamos el elemento
      setTimeout(() => {
        notification.style.display = 'none';
        notification.style.opacity = "1";  // Resetear la opacidad para futuras notificaciones
      }, 6000);  // 5 segundos de visibilidad + 1 segundo de desvanecimiento
    }
  }

  const getUserIdFromCookies = () => {
    const cookies = document.cookie.split("; ");
    for (let cookie of cookies) {
      const [key, value] = cookie.split("=");
      if (key === "id") {
        return value;
      }
    }
    return null;
  };

  const getUserData = async (userId) => {
    try {
      const response = await fetch(`http://localhost:3000/main-screen/get-user/${userId}`);
      if (!response.ok) throw new Error(`HTTP Error: ${response.status}`);
      
      const data = await response.json();
      const currentUsername = data.username || "Guest";
      
      // Espera un breve momento para asegurar que el DOM está listo
      setTimeout(() => {
        const usernameInput = document.getElementById("profile-username");
        console.log("Elemento input:", usernameInput);
        if (usernameInput) {
          usernameInput.value = currentUsername;
          console.log("Username actualizado:", currentUsername);
        }
      }, 50);
    } catch (error) {
      console.error("Error obteniendo el nombre del usuario:", error);
    }
  };

  // Función para borrar cookies
  const deleteCookie = (name) => {
    document.cookie = name + '=; Max-Age=-99999999;';
  };

  // Función para cerrar sesión con cookies
  const logout = () => {
    // Borramos las cookies correspondientes a los tokens y el ID
    deleteCookie('accessToken');
    deleteCookie('refreshToken');
    deleteCookie('id');

    // Redirigimos a la página de login
    window.location.href = '/'; // Cambia a la ruta que corresponda
  };

  document.getElementById('logoutButton').addEventListener('click', logout);

  // Función para hacer hash de la contraseña usando crypto.subtle
  async function hashPassword(password) {
    const encoder = new TextEncoder();
    const data = encoder.encode(password);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    return Array.from(new Uint8Array(hashBuffer))
      .map(b => b.toString(16).padStart(2, '0'))
      .join('');
  }

  // Función para actualizar los datos del usuario
  const updateUser = async (userId, username, password) => {
    try {
      // Si se proporcionan contraseñas, comprobamos que coincidan
      const passwordInput = document.getElementById('password');
      const passwordBInput = document.getElementById('passwordB');

      if (passwordInput.value && passwordInput.value !== passwordBInput.value) {
        showNotification('Las contraseñas no coinciden', 'error');
        return;
      }

      // Si la contraseña es proporcionada, la hasheamos
      let hashedPassword = null;
      if (passwordInput.value) {
        hashedPassword = await hashPassword(passwordInput.value);
      }

      // Preparamos los datos a enviar
      const data = {
        username,
        password: hashedPassword
      };

      // Hacemos la solicitud al backend para actualizar los datos
      const response = await fetch(`http://localhost:3000/main-screen/update-user/${userId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });

      if (!response.ok) throw new Error('Error al actualizar los datos del usuario');

      const result = await response.json();
      showNotification('Datos actualizados correctamente', "success");
      
      setTimeout(() => {
        window.location.href = '/profile'; // Redirigir después de mostrar la notificación
      }, 3000); // 6 segundos después de la notificación
    } catch (error) {
      console.error('Error actualizando los datos:', error);
      showNotification('Hubo un error al actualizar los datos.', "error");
      setTimeout(() => {
        window.location.href = '/profile'; // Redirigir después de mostrar la notificación
      }, 3000); // 6 segundos después de la notificación
    }
  };

  // Función para manejar el envío del formulario
  const handleSubmit = (event) => {
    event.preventDefault();

    const userId = getUserIdFromCookies();
    const username = document.getElementById('profile-username').value;
    const password = document.getElementById('password').value;

    if (userId) {
      updateUser(userId, username, password);
    } else {
      showNotification('Usuario no encontrado', 'error');
    }
  };

  // Añadimos el evento de submit al formulario
  document.getElementById('profileForm').addEventListener('submit', handleSubmit);

  // Espera a que todo el DOM esté listo
  window.addEventListener('load', () => {
    const userId = getUserIdFromCookies();
    if (userId) {
      getUserData(userId);
    }
  });
</script>


<style>
/* 🔹 RESET GENERAL */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* 🔹 ELIMINAR SCROLL HORIZONTAL */
html, body {
  width: 100vw;
  height: 100vh;
  overflow-x: hidden;
  background-color: #282032;
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* 🔹 NAVBAR OCUPANDO TODO EL ANCHO */
.navbar-container {
  width: 100%;
  position: sticky; /* 🔹 AHORA SE MUEVE CON EL SCROLL */
  top: 0;
  left: 0;
  background: #282032;
  padding: 10px 0;
  z-index: 1000;
}

Navbar {
  width: 100%;
  display: flex;
  justify-content: space-between;
  padding: 0 20px;
}

/* 🔹 LOGO SUPERPUESTO AL NAVBAR */
.logo-container {
  position: absolute;
  top: 20px;
  left: 50%;
  transform: translate(-50%, -20%);
  z-index: 1001; /* Más alto que la NavBar */
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  gap: 20px; /* Espacio entre elementos */
}

.logo-container img {
  width: 120px; /* Ajustar tamaño si es necesario */
  height: auto;
}

/* 🔹 CONTENEDOR PRINCIPAL */
.container {
  width: 100vw;
  max-width: 100%;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  background: #282032;
  padding: 20px;
  margin-top: 80px; /* Ajuste para que no tape la NavBar */
}

/* 🔹 CABECERA */
.header {
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 20px 0;
  margin-top: -70px;
}

.title {
  color: white;
  font-size: 32px;
  font-weight: bold;
  text-align: center;
  font-family: 'Luckiest Guy', cursive;
  letter-spacing: 1px; /* Opcional: mejora la legibilidad */
}

/* 🔹 FORMULARIO DE EDICIÓN */
.form-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  max-width: 500px;
  background: #383848;
  padding: 20px;
  border-radius: 8px;
}

.profile-form {
  width: 100%;
  display: flex;
  flex-direction: column;
}

.form-group {
  margin-bottom: 15px;
}

label {
  color: white;
  font-size: 14px;
  font-weight: bold;
}

input {
  width: 100%;
  padding: 10px;
  border: 2px solid #ccc;
  border-radius: 4px;
  background: #4a4a55;
  color: white;
  font-size: 16px;
  margin-top: 5px;
}

input:focus {
  outline: none;
  border-color: #a3a3a3;
}

.save-button {
  background: #4caf50;
  color: white;
  padding: 10px;
  border: none;
  border-radius: 4px;
  font-size: 16px;
  cursor: pointer;
  margin-top: 20px;
}

.save-button:hover {
  background: #45a049;
}

.logout-button {
  background: red;
  color: white;
  padding: 10px;
  border: none;
  border-radius: 4px;
  font-size: 16px;
  cursor: pointer;
  margin-top: 20px;
}

.logout-button:hover {
  background: #e60000;
}

/* 🔹 NOTIFICACIÓN */
.notification {
  position: fixed;
  top: 150px;
  left: 50%;
  transform: translateX(-50%);
  padding: 15px 30px;
  border-radius: 10px;
  color: white;
  font-size: 16px;
  display: block;
  z-index: 1000;
  max-width: 300px;
  text-align: center;
  opacity: 1;
  transition: opacity 1s ease-out; /* Añadimos la animación de desvanecimiento */
}

.notification.success {
  background-color: green;
}

.notification.error {
  background-color: red;
}

/* 🔹 RESPONSIVE */
@media (max-width: 768px) {
  .logo-container img {
    width: 100px;
  }

  .form-container {
    width: 90%;
  }

  .profile-form {
    width: 100%;
  }
}
</style>
