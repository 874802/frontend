---

import FriendItem from "./FriendItem.tsx";
import Logo from "../../components/Logo.astro";
import Layout from "../../layouts/Layout.astro";
import Navbar from "../../components/Navbar.astro";

---

<head>
  <meta charset="UTF-8">
</head>

<Layout />

<!-- NAVBAR OCUPANDO TODO EL ANCHO -->
<div class="navbar-container">
  <Navbar />
</div>

<!-- LOGO SUPERPUESTO AL NAVBAR -->
<div class="logo-container">
  <Logo />
</div>

<!-- CONTENEDOR PRINCIPAL -->
<div class="container">
  <header class="header">
    <h2 class="title">AMIGOS</h2>
  </header>

  <!-- TABS -->
  <div class="tabs">
    <button class="tab active" onclick="window.location.href='http://localhost:4321/requests'">
      <img src="/images/amigos/aceptar_amigos.png" alt="Solicitudes" class="icon" />
      <span>Solicitudes</span>
      <span class="badge">3</span>
    </button>
    <button class="tab" id="add-friend-btn">
      <img src="/images/amigos/agregar_amigos.png" alt="A√±adir" class="icon" />
      <span>A√±adir amigos</span>
    </button>
    <div class="tab-dropdown">
      <button class="tab" id="private-match-btn">
        <img src="/images/amigos/partida_privada.png" alt="Partida Privada" class="icon" />
        <span>Partida Privada</span>
      </button>
      <div class="dropdown-menu" id="dropdown-menu">
        <button class="dropdown-item">Crear Partida</button>
        <button class="dropdown-item">Unirse a Partida</button>
      </div>
    </div>
  </div>

    <!-- MODAL FORMULARIO A√ëADIR AMIGOS -->
    <div id="add-friend-modal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h3>Agregar un amigo</h3>
        <input type="text" id="friend-name" placeholder="Introduce el nombre" required />
        <button id="send-request-btn">Enviar solicitud</button>
      </div>
    </div>

  <!-- Componente React -->
  <FriendItem />
</div>

<script>
import { validate as isUuid } from "uuid"; // Importamos funciones necesarias

document.addEventListener("DOMContentLoaded", function () {
  // Manejo del bot√≥n "A√±adir amigo" y el modal
  const addFriendBtn = document.getElementById("add-friend-btn");
  const modal = document.getElementById("add-friend-modal");
  const closeModal = document.querySelector(".close");
  const sendRequestBtn = document.getElementById("send-request-btn");

  // Manejo del bot√≥n "A√±adir amigo"
  if (addFriendBtn && modal && closeModal && sendRequestBtn) {
    // Mostrar modal al hacer clic en "A√±adir amigos"
    addFriendBtn.addEventListener("click", function () {
      modal.style.display = "flex";
    });

    // Cerrar modal al hacer clic en la "X"
    closeModal.addEventListener("click", function () {
      modal.style.display = "none";
    });

    // Cerrar modal si se hace clic fuera del contenido
    window.addEventListener("click", function (event) {
      if (event.target === modal) {
        modal.style.display = "none";
      }
    });

    // Enviar solicitud de amistad
    sendRequestBtn.addEventListener("click", async function () {
      const friendNameInput = document.getElementById("friend-name") as HTMLInputElement;
      const friendName = friendNameInput ? friendNameInput.value.trim() : "";

      if (friendName) {
        try {
          const userId = getCookie("id");

          if (userId) {
            if (!isUuid(userId)) {
              console.warn("El ID proporcionado no es un UUID v√°lido. Se generar√° uno nuevo.");
              return;
            }

            const userData = await getUserData(userId);

            // Enviar solicitud de amistad al backend
            await sendFriendRequest(userData.username, friendName);

            modal.style.display = "none"; // Cerrar modal despu√©s de enviar
          }
        } catch (error) {
          console.error("‚ùå Error al procesar la solicitud de amistad:", error);
        }
      } else {
        alert("Por favor, introduce un nombre.");
      }
    });
  }

  // Funci√≥n para obtener el nombre del usuario mediante su ID
  async function getUserData(userId: string) {
    const url = `http://localhost:3000/main-screen/get-user/${userId}`;
    console.log(`üì° Realizando petici√≥n a: ${url}`);

    const response = await fetch(url);
    if (!response.ok) throw new Error(`HTTP Error: ${response.status}`);

    const data = await response.json();
    console.log("‚úÖ Datos obtenidos del servidor:", data.username);
    return data;
  }

  // Funci√≥n para obtener el valor de una cookie por su nombre
  function getCookie(name: string): string | null {
    const cookies = document.cookie.split("; ");
    for (let cookie of cookies) {
      const [key, value] = cookie.split("=");
      if (key === name) return value;
    }
    return null;
  }

  // Funci√≥n para enviar la solicitud de amistad
  async function sendFriendRequest(userName: string, friendName: string) {
    try {
      console.log("üì° Enviando solicitud de amistad...");
      console.log("userName:", userName);
      console.log("friendName:", friendName);

      // Hacemos la solicitud HTTP al backend usando `fetch`
      const response = await fetch(`http://localhost:3000/friends/add_solicitud/${userName}`, {
        method: "POST", // Usamos el m√©todo POST para enviar la solicitud
        headers: {
          "Content-Type": "application/json", // Indicamos que estamos enviando JSON
        },
        body: JSON.stringify({ id: friendName }), // Enviamos el nombre del amigo como 'id' en el cuerpo de la solicitud
      });

      console.log("üîç C√≥digo de estado de la respuesta:", response.status); // Verifica el c√≥digo de estado de la respuesta

      // Si la respuesta no es exitosa, lanzamos un error
      if (!response.ok) {
        const errorText = await response.text(); // Obtener el mensaje de error desde el backend
        console.log("‚ùå Error en la respuesta:", errorText);
        throw new Error("Error al enviar la solicitud");
      }

      // Si la respuesta es exitosa, intentamos obtener los datos del servidor
      const data = await response.json();
      console.log("‚úÖ Datos recibidos del servidor:", data); // Verificamos lo que devuelve el servidor

      // Alerta al usuario indicando que la solicitud fue enviada correctamente
      alert(`Solicitud enviada a ${friendName}`);
    } catch (error) {
      console.error("‚ùå Error al enviar la solicitud:", error); // Mostrar error detallado en la consola
      alert("Hubo un problema al enviar la solicitud. Intenta nuevamente.");
    }
  }

  // Manejo del bot√≥n para el match privado
  const privateMatchBtn = document.getElementById("private-match-btn");
  const dropdown = document.getElementById("dropdown-menu");

  if (privateMatchBtn && dropdown) {
    privateMatchBtn.addEventListener("click", function () {
      dropdown.classList.toggle("show");
    });

    document.addEventListener("click", function (event) {
      const target = event.target as Node;
      if (!privateMatchBtn.contains(target) && !dropdown.contains(target)) {
        dropdown.classList.remove("show");
      }
    });
  }
});

</script>

<style>
/* üîπ RESET GENERAL */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* üîπ ELIMINAR SCROLL HORIZONTAL */
html, body {
  width: 100vw;
  height: 100vh;
  overflow-x: hidden;
  background-color: #282032;
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* üîπ NAVBAR OCUPANDO TODO EL ANCHO */
.navbar-container {
  width: 100%;
  position: sticky; /* üîπ AHORA SE MUEVE CON EL SCROLL */
  top: 0;
  left: 0;
  background: #282032;
  padding: 10px 0;
  z-index: 1000;
}

Navbar {
  width: 100%;
  display: flex;
  justify-content: space-between;
  padding: 0 20px;
}

/* üîπ LOGO SUPERPUESTO AL NAVBAR */
.logo-container {
  position: absolute;
  top: 20px;
  left: 50%;
  transform: translate(-50%, -20%);
  z-index: 1001; /* M√°s alto que la NavBar */
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  gap: 20px; /* Espacio entre elementos */
}

.logo-container img {
  width: 120px; /* Ajustar tama√±o si es necesario */
  height: auto;
}

/* üîπ CONTENEDOR PRINCIPAL */
.container {
  width: 100vw;
  max-width: 100%;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  background: #282032;
  padding: 20px;
  margin-top: 80px; /* Ajuste para que no tape la NavBar */
}

/* üîπ CABECERA */
.header {
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 20px 0;
  margin-top: -70px;
}

.title {
  color: white;
  font-size: 32px;
  font-weight: bold;
  text-align: center;
}

/* üîπ TABS OCUPANDO TODO EL ANCHO */
.tabs {
  display: flex;
  justify-content: center;
  gap: 15px;
  width: 100%;
  max-width: 800px;
  background: #3e005a;
  border-radius: 10px;
  padding: 10px;
  margin-bottom: 20px;
}

.tab {
  background: #57257a;
  color: white;
  border: none;
  font-size: 16px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 12px 20px;
  border-radius: 12px;
  transition: background 0.3s ease;
  flex: 1; /* üîπ Distribuye el espacio equitativamente */
  justify-content: center;
}

.tab:hover {
  background: #282032;
}

.icon {
  width: 24px;
  height: auto;
}

.badge {
  background: green;
  color: white;
  padding: 3px 8px;
  border-radius: 50%;
  font-size: 14px;
}

/* üîπ DROPDOWN */
.tab-dropdown {
  position: relative;
}

.dropdown-menu {
  display: none;
  position: absolute;
  top: 0;
  left: 100%; /* üîπ Mueve el men√∫ a la derecha */
  background: #57257a;
  border-radius: 10px;
  overflow: hidden;
  width: max-content; /* üîπ Para que se ajuste al contenido */
  min-width: 150px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  z-index: 1000;
}

.dropdown-menu.show {
  display: block;
}

.dropdown-item {
  background: #57257a;
  color: white;
  border: none;
  font-size: 14px;
  padding: 10px;
  width: 100%;
  text-align: center;
  cursor: pointer;
  transition: background 0.3s ease;
}

.dropdown-item:hover {
  background: #3e005a;
}

/* üîπ LISTA DE AMIGOS */
.friends-list {
  background: #666;
  padding: 20px;
  border-radius: 10px;
  text-align: left;
  width: 100%;
  max-width: 800px;
}

/* üîπ MODAL (FORMULARIO A√ëADIR AMIGOS) */
.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  justify-content: center;
  align-items: center;
}

.modal-content {
  background: white;
  padding: 20px;
  border-radius: 10px;
  text-align: center;
  display: flex;
  flex-direction: column;
  gap: 10px;
  width: 300px;
}

.modal-content h3 {
  margin-bottom: 10px;
}

.modal-content input {
  padding: 8px;
  width: 100%;
  border: 1px solid #ccc;
  border-radius: 5px;
}

.modal-content button {
  background: #57257a;
  color: white;
  border: none;
  padding: 10px;
  cursor: pointer;
  border-radius: 5px;
  transition: background 0.3s ease;
}

.modal-content button:hover {
  background: #3e005a;
}

/* üîπ BOT√ìN DE CERRAR MODAL */
.close {
  color: black;
  font-size: 24px;
  font-weight: bold;
  cursor: pointer;
  align-self: flex-end;
}

/* üîπ RESPONSIVE */
@media (max-width: 768px) {
  .tabs {
    flex-direction: column;
    width: 90%;
  }

  .tab {
    width: 100%;
  }

  .friends-list {
    width: 90%;
  }

  .logo-container img {
    width: 100px;
  }
}
</style>
