<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link rel="stylesheet" href="/styles.css">
    <script>
      async function hashPassword(password: string) : Promise<string> {
        // Salt fijo predeterminado (NO cambiar una vez en producci√≥n)
        const fixedSalt = "fj27dk39slf1";
        
        // Combina la contrase√±a con el salt
        const saltedPassword = fixedSalt + password;
        
        // Convierte la cadena a un array de bytes
        let bytes = [];
        for (let i = 0; i < saltedPassword.length; i++) {
          bytes.push(saltedPassword.charCodeAt(i));
        }
        
        // Implementaci√≥n simple de SHA-256
        // (Nota: Esta es una implementaci√≥n simplificada y no tan segura como una librer√≠a criptogr√°fica real)
        let hash = 0;
        for (let i = 0; i < bytes.length; i++) {
          const byte = bytes[i];
          hash = ((hash << 5) - hash) + byte;
          hash = hash & hash; // Convierte a un entero de 32 bits
        }
        
        // Convierte el hash a una representaci√≥n hexadecimal
        let hashHex = (hash >>> 0).toString(16);
        while (hashHex.length < 8) {
          hashHex = "0" + hashHex;
        }
        
        // Agrega m√°s complejidad (iteraciones)
        for (let i = 0; i < 1000; i++) {
          hashHex = hashHex + fixedSalt;
          let tempHash = 0;
          for (let j = 0; j < hashHex.length; j++) {
            tempHash = ((tempHash << 5) - tempHash) + hashHex.charCodeAt(j);
            tempHash = tempHash & tempHash;
          }
          hashHex = (tempHash >>> 0).toString(16);
        }
        
        return hashHex;
      }

      document.addEventListener("DOMContentLoaded", function () {
          const passwordInput = document.querySelector("#password") as HTMLInputElement | null;
          const password2Input = document.querySelector("#password2") as HTMLInputElement | null;
          const passwordGroup = document.querySelector(".password-group");
          const loginButtonGroup = document.querySelector(".submit-group");
          const loginForm = document.querySelector(".form");

          if (!passwordInput || !passwordGroup || !loginButtonGroup || !loginForm || !password2Input) {
              console.error("‚ùå Uno o m√°s elementos del formulario no se encontraron en el DOM.");
              return;
          }

          let errorMessage = document.getElementById("error-message") as HTMLParagraphElement | null;
          if (!errorMessage) {
              errorMessage = document.createElement("p");
              errorMessage.id = "error-message";
              errorMessage.style.color = "red";
              errorMessage.style.display = "none";
              loginForm.appendChild(errorMessage);
          }

          passwordInput.addEventListener("click", function () {
              passwordGroup.classList.add("show");
              loginButtonGroup.classList.add("show");
          });

          loginForm.addEventListener("submit", async function (event) {
              event.preventDefault();

              const password = passwordInput.value.trim();
              const password2 = password2Input.value.trim();

              if (!password || !password2) {
                  console.warn("‚ö†Ô∏è Campos vac√≠os en el formulario.");
                  errorMessage.textContent = "Por favor, complete ambos campos.";
                  errorMessage.style.display = "block";
                  return;
              }

              // Comprobar si las contrase√±as coinciden
              if (password !== password2) {
                  console.warn("‚ö†Ô∏è Las contrase√±as no coinciden.");
                  errorMessage.textContent = "Las contrase√±as no coinciden.";
                  errorMessage.style.display = "block";
                  return;
              }

              // Hashear la contrase√±a antes de enviarla
              const hashedPassword = await hashPassword(password);
              console.log("üîê Contrase√±a hasheada:", hashedPassword);

              // Obtener el token del query string
              const urlParams = new URLSearchParams(window.location.search);
              const token = urlParams.get('token');

              if (!token) {
                  console.error("‚ùå No se encontr√≥ el token.");
                  errorMessage.textContent = "No se encontr√≥ el token en la URL.";
                  errorMessage.style.display = "block";
                  return;
              }

              try {
                const response = await fetch(`http://galaxy.t2dc.es:3000/auth/reset-password/${token}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ newPassword: hashedPassword })
                });

                const textResponse = await response.text();  // Obt√©n la respuesta como texto
                console.log("üì° Respuesta del servidor:", textResponse); // Verifica la respuesta completa

                if (!response.ok) {
                    throw new Error(`Error: ${response.statusText}`);
                }

                // Intenta convertir la respuesta a JSON
                const data = JSON.parse(textResponse);
                console.log("üìä Datos de la API:", data);

                if (response.ok) {
                    console.log("‚úÖ Contrase√±a cambiada correctamente");
                    window.location.href = "/login";
                } else {
                    console.warn("‚ö†Ô∏è Error en la solicitud:", data.message);
                    errorMessage.textContent = data.message || "Error al cambiar la contrase√±a";
                    errorMessage.style.display = "block";
                }
            } catch (error) {
                console.error("‚ùå Error en la solicitud:", error);
                errorMessage.textContent = "Error en la conexi√≥n con el servidor";
                errorMessage.style.display = "block";
            }
          });
      });
    </script>
</head>
<body>
  <div class="grid-container">
      <div class="form-container">
          <img src="../../../public/images/logo_galaxy.png" alt="Logo de la aplicaci√≥n" class="logo">
          <h1 class="title">Recuperar contrase√±a</h1>
          <form class="form" action="/changePassword" method="POST">
              <div class="input-group">
                  <label for="password">Introduzca su nueva contrase√±a</label>
                  <input type="password" id="password" name="password" required>
              </div>
              <div class="input-group password-group">
                  <label for="password2">Confirme su contrase√±a</label>
                  <input type="password" id="password2" name="password2" required>
              </div>
              <div class="input-group submit-group">
                <button type="submit" class="sign">Cambiar contrase√±a</button>
              </div>
          </form>
      </div>
  </div>
</body>
</html>



<style>
	/* From Uiverse.io by Yaya12085 */ 
.form-container {
  width: 320px;
  border-radius: 0.75rem;
  background-color: rgba(17, 24, 39, 1);
  padding: 2rem;
  color: rgba(243, 244, 246, 1);
}

.title {
  text-align: center;
  font-size: 1.5rem;
  line-height: 2rem;
  font-weight: 700;
}

.form {
  margin-top: 1.5rem;
}

.input-group {
  margin-top: 0.25rem;
  font-size: 0.875rem;
  line-height: 1.25rem;
}
.logo {
  width: 100px;
  margin-bottom: 10px;
  margin-left: 78px;
}
.input-group label {
  display: block;
  color: rgba(156, 163, 175, 1);
  margin-bottom: 4px;
}

.input-group input {
  width: 100%;
  border-radius: 0.375rem;
  border: 1px solid rgba(55, 65, 81, 1);
  outline: 0;
  background-color: rgba(17, 24, 39, 1);
  padding: 0.75rem 1rem;
  color: rgba(243, 244, 246, 1);
}

.input-group input:focus {
  border-color: rgba(167, 139, 250);
}

.forgot {
  display: flex;
  justify-content: center;
  font-size: 0.75rem;
  line-height: 1rem;
  color: rgba(156, 163, 175,1);
  margin: 8px 0 14px 0;
}

.forgot a,.signup a {
  color: rgba(243, 244, 246, 1);
  text-decoration: none;
  font-size: 14px;
}

.forgot a:hover, .signup a:hover {
  text-decoration: underline rgba(167, 139, 250, 1);
}

.sign {
  display: block;
  width: 100%;
  background-color: rgba(167, 139, 250, 1);
  padding: 0.75rem;
  text-align: center;
  color: rgba(17, 24, 39, 1);
  border: none;
  border-radius: 0.375rem;
  font-weight: 600;
}

.social-message {
  display: flex;
  align-items: center;
  padding-top: 1rem;
}

.line {
  height: 1px;
  flex: 1 1 0%;
  background-color: rgba(55, 65, 81, 1);
}

.social-message .message {
  padding-left: 0.75rem;
  padding-right: 0.75rem;
  font-size: 0.875rem;
  line-height: 1.25rem;
  color: rgba(156, 163, 175, 1);
}

.social-icons {
  display: flex;
  justify-content: center;
}

.social-icons .icon {
  border-radius: 0.125rem;
  padding: 0.75rem;
  border: none;
  background-color: transparent;
  margin-left: 8px;
}

.social-icons .icon svg {
  height: 1.25rem;
  width: 1.25rem;
  fill: #fff;
}

.signup {
  margin-top: 19px;
  text-align: center;
  font-size: 0.75rem;
  line-height: 1rem;
  color: rgba(156, 163, 175, 1);
}

/*Cuerpo p√°gina */
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    background: url('../../../public/images/fondos/loginfondo.gif') no-repeat center center fixed;
    background-size: cover;
}
.grid-container {
    display: grid;
    place-items: center;
    height: 100vh;
    width: 100vw;
}
.form-container {
    border: 2px solid white;
    opacity: 0;
    transform: translateY(-20px);
    animation: fadeIn 0.5s ease-out forwards;
    text-align: center;
    padding: 20px;
    background: rgba(0, 0, 0, 0.7);
    border-radius: 10px;
}
.logo {
    width: 100px;
    margin: 0 auto 10px auto;
    display: block;
}
.input-group {
    margin-top: 1rem;
}
.password-group, .submit-group, .forgot-group {
    opacity: 0;
    transform: translateY(-20px);
    max-height: 0;
    overflow: hidden;
    transition: opacity 0.5s ease-out, transform 0.5s ease-out, max-height 0.5s ease-out;
}
.password-group.show, .submit-group.show, .forgot-group.show {
    opacity: 1;
    transform: translateY(0);
    max-height: 100px;
}
@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}
</style>