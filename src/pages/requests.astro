---
export const prerender = false;

// Importar la función para mostrar las solicitudes de amistad
import Logo from "../components/Logo.astro";
import Layout from "../layouts/Layout.astro";
import Navbar from "../components/Navbar.astro";
//import "../../styles/confirm.css"; 

import { getUserIdFromAccessToken } from "../utils/auth";

export const onRequest = (context: any, next: any) => {
  const isAuthenticated = getUserIdFromAccessToken();
  if (!isAuthenticated) {
    return context.redirect('/login');
  }
  return next();
};
---

<head>
  <meta charset="UTF-8">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Luckiest+Guy&display=swap">
</head>

<Layout />

<!-- NAVBAR -->
<div class="navbar-container">
  <Navbar />
</div>

<!-- LOGO -->
<div class="logo-container">
  <Logo />
</div>

<!-- CONFIRMACION PARA RECHAZAR SOLICITUD -->
<div id="deny-request-confirm" class="confirm">
  <div class="confirm-content">
    <p>¿Estás seguro de que quieres rechazar esta solicitud de amistad?</p>
    <div class="confirm-actions">
      <button id="confirm-deny-btn" class="confirm-btn">Aceptar</button>
      <button id="cancel-deny-btn" class="cancel-btn">Cancelar</button>
    </div>
  </div>
</div>

<!-- CONTENEDOR PRINCIPAL -->
<div class="container">
  <header class="header">
    <h2 class="title">SOLICITUDES DE AMISTAD</h2>
  </header>



  <div id="notification" class="notification"></div>

  <!-- LISTA DE SOLICITUDES -->
  <client:only>
    <script>
      import type { UUIDTypes } from "uuid";
      import { fetchWithToken } from "../utils/fetchWithToken.js";

      interface Solicitud {
        User1: {
          username: string;
          id: UUIDTypes;
          lastConnection: string;
        };
        User2: {
          username: string;
          id: UUIDTypes;
          lastConnection: string;
        };
      }
  
      let solicitudesData: Solicitud[] = [];
      let currentUsername: string = ''; 

      // Función para obtener el nombre de usuario
      const getUserData = async (userId: string) => {
        const url = `http://galaxy.t2dc.es:3000/main-screen/get-user/${userId}`;
        console.log(`📡 Realizando petición a: ${url}`);

        try {
          const response = await fetchWithToken(url);
          console.log(`📥 Respuesta recibida. Código de estado: ${response.status}`);

          if (!response.ok) throw new Error(`HTTP Error: ${response.status}`);

          const data = await response.json();
          console.log("✅ Datos obtenidos del servidor:", data.username);

          currentUsername = data.username || "Guest"; // Guardamos el username
          console.log(`📝 Nombre de usuario actualizado en la interfaz: ${currentUsername}`);
          //getSolicitudes(); // Llamamos a la función para obtener solicitudes después de obtener el username
        } catch (error) {
          console.error("❌ Error obteniendo el nombre del usuario:", error);
        }
      };

      // Función para mostrar notificación
      function showNotification(message : string, type : string) {
        const notification = document.getElementById("notification");

        if (notification) {
          console.log("Se debería mostrar la notificacion");
          notification.textContent = message;
          notification.className = `notification ${type}`; // 'success' o 'error'
          notification.style.display = 'block';  // Asegura que la notificación se muestra

          // Después de 5 segundos, empezamos a ocultar la notificación de forma gradual
          setTimeout(() => {
            notification.style.opacity = "0";  // Comienza el desvanecimiento
          }, 5000);

          // Después de la animación de desvanecimiento (1 segundo), ocultamos el elemento
          setTimeout(() => {
            notification.style.display = 'none';
            notification.style.opacity = "1";  // Resetear la opacidad para futuras notificaciones
          }, 6000);  // 5 segundos de visibilidad + 1 segundo de desvanecimiento
        }
      }

      async function denySolicitud(userID : UUIDTypes, friendID : UUIDTypes) {
        try {
          console.log("📡 Rechazando solicitud de amistad...");
          console.log("userID:", userID);
          console.log("friendID:", friendID);

          // Hacemos la solicitud HTTP al backend usando `fetch`
          const response = await fetchWithToken(`http://galaxy.t2dc.es:3000/friends/deny_solicitud/${userID}`, {
            method: "POST", // Usamos el método POST para enviar la solicitud
            body: JSON.stringify({ id: friendID }), // Enviamos el ID del amigo
          });

          console.log("🔍 Código de estado de la respuesta:", response.status); // Verifica el código de estado de la respuesta

          if (!response.ok) {
            const errorText = await response.text();
            console.log("❌ Error en la respuesta:", errorText);
            showNotification("Ha habido un error.", "error");
            throw new Error("Error al enviar la solicitud");
          }

          const data = await response.json();
          console.log("✅ Datos recibidos del servidor:", data); // Verificamos lo que devuelve el servidor
          await getSolicitudes();

          // Mostrar mensaje de éxito
          showNotification("Solicitud rechazada correctamente.", "success");
        } catch (error) {
          console.error("❌ Error al rechazar la solicitud:", error);
          // Opcionalmente, mostrar mensaje de error al usuario
          // showNotification("Error al enviar la solicitud. Intenta nuevamente.", "error");
        }
      }

      async function acceptFriends(userID : UUIDTypes, friendID : UUIDTypes) {
        try {
          console.log("📡 Enviando solicitud de amistad...");
          console.log("userID:", userID);
          console.log("friendID:", friendID);

          // Hacemos la solicitud HTTP al backend usando `fetch`
          const response = await fetchWithToken(`http://galaxy.t2dc.es:3000/friends/add_friend/${userID}`, {
            method: "POST", // Usamos el método POST para enviar la solicitud
            body: JSON.stringify({ id: friendID }), // Enviamos el ID del amigo
          });

          console.log("🔍 Código de estado de la respuesta:", response.status); // Verifica el código de estado de la respuesta

          if (!response.ok) {
            const errorText = await response.text();
            console.log("❌ Error en la respuesta:", errorText);
            showNotification("Ha habido un error.", "error");
            throw new Error("Error al enviar la solicitud");
          }

          const data = await response.json();
          console.log("✅ Datos recibidos del servidor:", data); // Verificamos lo que devuelve el servidor
          await getSolicitudes();

          // Mostrar mensaje de éxito
          showNotification("Amigo añadido correctamente.", "success");
        } catch (error) {
          console.error("❌ Error al enviar la solicitud:", error);
          // Opcionalmente, mostrar mensaje de error al usuario
          // showNotification("Error al enviar la solicitud. Intenta nuevamente.", "error");
        }
      }

      
      // Función para decodificar el JWT (sin verificar la firma, ya que es del cliente)
      const decodeJWT = (token : string) => {
        try {
          if (!token) return null;
          const base64Url = token.split('.')[1];
          const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
          const payload = JSON.parse(atob(base64));
          return payload;
        } catch (error) {
          console.error("Error decodificando el JWT:", error);
          return null;
        }
      };

      // Función para obtener el ID del usuario desde el accessToken en las cookies
      const getUserIdFromAccessToken = () => {
        const cookies = document.cookie.split("; ");
        for (let cookie of cookies) {
          const [key, value] = cookie.split("=");
          if (key === "accessToken") {
            const payload = decodeJWT(value);
            return payload?.id || null;
          }
        }
        return null;
      };

  
      const getSolicitudes = async () => {
        try {
          const userId = getUserIdFromAccessToken();
  
          if (!userId) {
            console.log("Id no encontrado");
          } else {
            console.log("Id encontrado", userId);
            //Encontrar el username del usuario:
            await getUserData(userId);


            const response = await fetchWithToken(`http://galaxy.t2dc.es:3000/friends/get_solicitudes/${userId}`);
            const data = await response.json();
            solicitudesData = data;
            console.log("Solicitudes de amistad:", solicitudesData);

            const solicitudesList = document.getElementById("solicitudes-list");
            if (solicitudesList) {
              const filteredSolicitudes = solicitudesData.filter(solicitud => solicitud.User1.username !== currentUsername);
              solicitudesList.innerHTML = filteredSolicitudes.length > 0
                ? filteredSolicitudes.map((solicitud) => {
                  const lastConnectionDate = new Date(solicitud.User1.lastConnection);
                  const hoursAgo = Math.floor((new Date().getTime() - lastConnectionDate.getTime()) / (1000 * 60 * 60)); // Horas desde la última conexión
                  // Para aceptar solicitudes de amistad
                  return `
                    <div class="friend-item">
                      <div class="friend-info">
                        <span class="friend-name"><strong>${solicitud.User1.username}</strong></span>
                        <span class="friend-status">En línea hace ${hoursAgo} horas</span>
                      </div>
                      <div class="friend-actions">
                        <button class="add-btn" data-friend-id="${solicitud.User1.id}">
                          <img src="/images/amigos/aceptar_amigos.png" alt="Aceptar" />
                        </button>
                        <button class="remove-btn" data-friend-id-deny="${solicitud.User1.id}">
                          <img src="/images/amigos/eliminar_amigos.png" alt="Eliminar" />
                        </button>
                      </div>
                    </div>
                  `;}).join('')
                : '<div class="no-solicitudes"><p>No tienes solicitudes pendientes.</p></div>';

                // Aceptar las solicitudes de amistad
                const addFriendButtons = document.querySelectorAll('.add-btn');
                addFriendButtons.forEach(button => {
                  button.addEventListener('click', async () => {
                    console.log("🟢 Click detectado en botón de aceptar");
                    const friendID = button.getAttribute('data-friend-id');
                    if (friendID && userId) {
                      await acceptFriends(userId, friendID);
                    }
                  });
                });

                /*
                // Rechazar las solicitudes de amistad
                const denySolicitudButtons = document.querySelectorAll('.remove-btn');
                denySolicitudButtons.forEach(button => {
                  button.addEventListener('click', async () => {
                    console.log("🟢 Click detectado en botón de aceptar");
                    const friendID = button.getAttribute('data-friend-id-deny');
                    if (friendID && userId) {
                      await denySolicitud(userId, friendID);
                    }
                  });
                });
                */

                // Mostrar el confirm de rechazo de solicitud
                const denySolicitudButtons = document.querySelectorAll('.remove-btn');
                let currentFriendID: string | null = null;

                denySolicitudButtons.forEach(button => {
                  button.addEventListener('click', (e) => {
                    // Obtener el ID del amigo de la solicitud
                    currentFriendID = button.getAttribute('data-friend-id-deny');
                    // Mostrar el confirm de confirmación
                    const confirm = document.getElementById('deny-request-confirm');
                    if (confirm) confirm.style.display = 'flex';
                  });
                });

                // Cancelar la acción de rechazo
                const cancelDenyBtn = document.getElementById('cancel-deny-btn');
                if (cancelDenyBtn) {
                  cancelDenyBtn.addEventListener('click', () => {
                    const confirm = document.getElementById('deny-request-confirm');
                    if (confirm) confirm.style.display = 'none'; // Cerrar confirm
                  });
                }

                // Confirmar el rechazo de la solicitud
                const confirmDenyBtn = document.getElementById('confirm-deny-btn');
                if (confirmDenyBtn) {
                  confirmDenyBtn.addEventListener('click', async () => {
                    const userId = getUserIdFromAccessToken();
                    if (userId && currentFriendID) {
                      await denySolicitud(userId, currentFriendID); // Llamamos a la función para rechazar la solicitud
                      const confirm = document.getElementById('deny-request-confirm');
                      if (confirm) confirm.style.display = 'none'; // Cerrar confirm
                    }
                  });
                }

                // Cerrar el confirm al hacer clic en la "X"
                const closeConfirm = document.querySelector(".close");
                if (closeConfirm) {
                  closeConfirm.addEventListener('click', () => {
                    const confirm = document.getElementById('deny-request-confirm');
                    if (confirm) confirm.style.display = 'none'; // Cerrar confirm
                  });
                }

                const noSolicitudes = solicitudesList.querySelector('.no-solicitudes') as HTMLElement;
                if (noSolicitudes) {
                  noSolicitudes.style.textAlign = 'center';
                  noSolicitudes.style.fontSize = '18px';
                  noSolicitudes.style.color = '#ccc';
                  noSolicitudes.style.fontWeight = 'bold';
                  noSolicitudes.style.padding = '20px';
                  noSolicitudes.style.border = '2px dashed #774a9b';
                  noSolicitudes.style.borderRadius = '10px';
                  noSolicitudes.style.background = 'rgba(255, 255, 255, 0.05)';
                  noSolicitudes.style.display = 'flex';
                  noSolicitudes.style.flexDirection = 'column';
                  noSolicitudes.style.alignItems = 'center';
                  noSolicitudes.style.justifyContent = 'center';
                  noSolicitudes.style.gap = '10px';
                  noSolicitudes.style.maxWidth = '400px';
                  noSolicitudes.style.margin = '20px auto';
                }

                if (solicitudesData.length > 0) {
                  const friendItems = solicitudesList.querySelectorAll('.friend-item');
                  /* Estilos para las solicitudes */
    
                  friendItems.forEach(item => {
                    const friendItem = item as HTMLElement;
  
                    friendItem.style.display = 'flex';
                    friendItem.style.justifyContent = 'space-between';
                    friendItem.style.alignItems = 'center';
                    friendItem.style.background = '#383848';
                    friendItem.style.padding = '12px';
                    friendItem.style.borderRadius = '5px';
                    friendItem.style.marginBottom = '8px';
                    friendItem.style.width = "600px";

                    const friendInfo = item.querySelector('.friend-info') as HTMLElement;
                    const friendName = item.querySelector('.friend-name') as HTMLElement;
                    const friendStatus = item.querySelector('.friend-status') as HTMLElement;
                    const addBtn = item.querySelector('.add-btn') as HTMLElement;
                    const removeBtn = item.querySelector('.remove-btn') as HTMLElement;
      
                    // Estilos para la información del amigo
                    if (friendInfo) {
                      friendInfo.style.display = 'flex';
                      friendInfo.style.flexDirection = 'row';
                      friendInfo.style.alignItems = 'center';
                      friendInfo.style.gap = '15px';
                    }
                    
                    if (friendName) {
                      friendName.style.fontFamily = "'Luckiest Guy', cursive";
                      friendName.style.fontSize = '28px';
                      friendName.style.color = '#53E3E6';
                      friendName.style.letterSpacing = '1px';
                    }
                    
                    if (friendStatus) {
                      friendStatus.style.color = '#ddd';
                      friendStatus.style.fontSize = '14px';
                      friendStatus.style.whiteSpace = 'nowrap';
                    }

                    if (addBtn) {
                      addBtn.style.backgroundColor = 'none';
                      addBtn.style.border = '2px solid green';
                      addBtn.style.borderRadius = '50%';
                      addBtn.style.padding = '8px';
                      addBtn.style.display = 'flex';
                      addBtn.style.justifyContent = 'center';
                      addBtn.style.alignItems = 'center';
                      addBtn.style.cursor = 'pointer';
                      addBtn.style.transition = 'background-color 0.3s ease, transform 0.2s ease';  // Transición suave para el fondo y la transformación
                    }

                    if (addBtn?.querySelector('img')) {
                      const addImg = addBtn.querySelector('img');
                      if (addImg) {
                        addImg.style.width = '20px';
                      }
                    }

                    if (removeBtn) {
                      removeBtn.style.backgroundColor = 'none';
                      removeBtn.style.border = '2px solid red';
                      removeBtn.style.borderRadius = '50%';
                      removeBtn.style.padding = '8px';
                      removeBtn.style.display = 'flex';
                      removeBtn.style.justifyContent = 'center';
                      removeBtn.style.alignItems = 'center';
                      removeBtn.style.cursor = 'pointer';
                      removeBtn.style.transition = 'background-color 0.3s ease, transform 0.2s ease';  // Transición suave para el fondo y la transformación
                    }

                    if (removeBtn?.querySelector('img')) {
                      const removeImg = removeBtn.querySelector('img');
                      if (removeImg) {
                        removeImg.style.width = '20px';
                      }
                    }

                    // Efecto hover para el botón de aceptar
                    if (addBtn) {
                      addBtn.addEventListener('mouseover', () => {
                        addBtn.style.backgroundColor = 'rgba(55, 191, 27, 0.2)';  // Fondo verde suave
                        addBtn.style.transform = 'scale(1.1)';
                      });
                      addBtn.addEventListener('mouseout', () => {
                        addBtn.style.backgroundColor = '';  // Vuelve al fondo original
                        addBtn.style.transform = '';
                      });
                    }

                    // Efecto hover para el botón de eliminar
                    if (removeBtn) {
                      removeBtn.addEventListener('mouseover', () => {
                        removeBtn.style.backgroundColor = 'rgba(255, 0, 0, 0.2)';  // Fondo rojo suave
                        removeBtn.style.transform = 'scale(1.1)';
                      });
                      removeBtn.addEventListener('mouseout', () => {
                        removeBtn.style.backgroundColor = '';  // Vuelve al fondo original
                        removeBtn.style.transform = '';
                      });
                    }

                    // Estilo para el contenedor de botones
                    const friendActions = item.querySelector('.friend-actions') as HTMLElement;
                    if (friendActions) {
                      friendActions.style.display = 'flex';
                      friendActions.style.gap = '10px';
                    }
                  });
                }
            }
          }
        } catch (error) {
          console.error("Error al obtener las solicitudes de amistad:", error);
        }
      };
  
      getSolicitudes();
    </script>
  
    <div id="solicitudes-list" class="friends-scroll"></div>
  </client:only>
</div>


<style>
/* 🔹 RESET GENERAL */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* 🔹 ELIMINAR SCROLL HORIZONTAL */
html, body {
  width: 100vw;
  height: 100vh;
  overflow-x: hidden;
  background-color: #282032;
  display: flex;
  flex-direction: column;
  align-items: center;
  overflow-y: hidden;
}

/* 🔹 NAVBAR OCUPANDO TODO EL ANCHO */
.navbar-container {
  width: 100%;
  position: sticky; /* 🔹 AHORA SE MUEVE CON EL SCROLL */
  top: 0;
  left: 0;
  background: #282032;
  padding: 10px 0;
  z-index: 1000;
}

Navbar {
  width: 100%;
  display: flex;
  justify-content: space-between;
  padding: 0 20px;
}

/* 🔹 LOGO SUPERPUESTO AL NAVBAR */
.logo-container {
  position: absolute;
  top: 20px;
  left: 50%;
  transform: translate(-50%, -20%);
  z-index: 1001; /* Más alto que la NavBar */
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  gap: 20px; /* Espacio entre elementos */
}

.logo-container img {
  width: 120px; /* Ajustar tamaño si es necesario */
  height: auto;
}

/* 🔹 CONTENEDOR PRINCIPAL */
.container {
  width: 100vw;
  max-width: 100%;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  background: #282032;
  padding: 20px;
  margin-top: 80px; /* Ajuste para que no tape la NavBar */
  width: 800px;
}

/* 🔹 CABECERA */
.header {
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 20px 0;
  margin-top: -70px;
}

.title {
  color: white;
  font-size: 32px;
  font-weight: bold;
  text-align: center;
  font-family: 'Luckiest Guy', cursive;
  letter-spacing: 1px; /* Opcional: mejora la legibilidad */
}

/* 🔹 TABS OCUPANDO TODO EL ANCHO */
.tabs {
  display: flex;
  justify-content: center;
  gap: 15px;
  width: 100%;
  max-width: 800px;
  background: #3e005a;
  border-radius: 10px;
  padding: 10px;
  margin-bottom: 20px;
}

.tab {
  background: #57257a;
  color: white;
  border: none;
  font-size: 16px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 12px 20px;
  border-radius: 12px;
  transition: background 0.3s ease;
  flex: 1; /* 🔹 Distribuye el espacio equitativamente */
  justify-content: center;
}

.tab:hover {
  background: #282032;
}

.icon {
  width: 24px;
  height: auto;
}

.badge {
  background: green;
  color: white;
  padding: 3px 8px;
  border-radius: 50%;
  font-size: 14px;
}

/* 🔹 LISTA DE AMIGOS */
.friends-list {
  background: #666;
  padding: 20px;
  border-radius: 10px;
  text-align: left;
  width: 100%;
  max-width: 800px;
}

.friends-scroll {
  max-height: 400px; /* Ajusta según lo que necesites */
  overflow-y: auto;
  padding-right: 10px; /* para evitar que el scroll tape contenido */
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
}

.friends-scroll::-webkit-scrollbar {
  width: 8px;
}

.friends-scroll::-webkit-scrollbar-thumb {
  background-color: #888;
  border-radius: 10px;
}

.friends-scroll::-webkit-scrollbar-track {
  background: transparent;
}

.no-solicitudes {
  text-align: center;
  font-size: 18px;
  color: #ccc;
  font-weight: bold;
  padding: 20px;
  border: 2px dashed #774a9b; /* Borde sutil para destacar */
  border-radius: 10px;
  background: rgba(255, 255, 255, 0.05);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 10px;
  max-width: 400px;
  margin: 20px auto; /* Centra el contenido */
}

/* 🔹 ICONO PARA CUANDO NO HAY AMIGOS */
.no-solicitudes img {
  width: 80px;
  height: auto;
  opacity: 0.7;
}

/* Para mostrar las notificaciones */
.notification {
  position: fixed;
  top: 215px;
  left: 50%;
  transform: translateX(-50%);
  padding: 15px 30px;
  border-radius: 10px;
  color: white;
  font-size: 16px;
  display: block;
  z-index: 1000;
  max-width: 300px;
  text-align: center;
  opacity: 1;
  transition: opacity 1s ease-out; /* Añadimos la animación de desvanecimiento */
}

.notification.success {
  background-color: green;
}

.notification.error {
  background-color: red;
}

/* 🔹 CONFIRMACION PARA RECHAZAR SOLICITUD */
.confirm {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.confirm-content {
    background: #4f2b5e;  /* Color de fondo */
    padding: 30px;
    border-radius: 10px;
    text-align: center;
    display: flex;
    flex-direction: column;
    gap: 25px;
    width: 350px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    margin: 0 10px;
}

.confirm-header {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    width: 100%;
}

.confirm-content h3 {
    margin: 0;
    color: #fff;
    font-size: 22px;
    font-weight: 600;
}

.close {
    font-size: 30px;
    cursor: pointer;
    color: #fff;
    margin-left: 10px;
}

.confirm-content p {
    color: #ccc;
    font-size: 16px;
    margin: 0;
}

.confirm-actions {
    display: flex;
    justify-content: center;
    gap: 15px;
    margin-top: 10px;
}

.confirm-btn, .cancel-btn {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
}

.confirm-btn {
    background-color: #6ab04c; /* Verde suave */
    color: white;
}

.confirm-btn:hover {
    background-color: #5aa044;
    transform: translateY(-2px);
}

.cancel-btn {
    background-color: #e74c3c; /* Rojo suave */
    color: white;
}

.cancel-btn:hover {
    background-color: #c0392b;
    transform: translateY(-2px);
}
  
/* 🔹 RESPONSIVE */
@media (max-width: 768px) {
  .tabs {
    flex-direction: column;
    width: 90%;
  }

  .tab {
    width: 100%;
  }

  .friends-list {
    width: 90%;
  }

  .logo-container img {
    width: 100px;
  }
}
</style>